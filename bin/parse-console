#!/usr/bin/env ruby

require 'optparse'
require 'json'
require 'open-uri'
require 'active_support'
require 'active_support/core_ext'

DEFAULT_CONFIG_FILE = 'config.json'
DEFAULT_CONFIG_CONTENTS = {
  "apps": [{
    "serverURL": ENV['PARSE_SERVER_URL'],
    "appId": "myAppId",
    "masterKey": "myMasterKey",
    "restAPIKey": "myRestAPIKey",
    "javascriptKey": "myJavascriptKey",
    "appName": "Parse Server App"
  }]
}.freeze

opts = { verbose: false, pry: false }
opt_parser = OptionParser.new do |o|

  o.banner =   "Usage: #{File.basename($0)} [options] SERVER_URL"
  o.separator  ""
  o.separator  "Example:"
  o.separator  "#{File.basename($0)} -a APP_ID -m MASTER_KEY https://your-parse-server-url"
  o.separator  "#{File.basename($0)} -c ./config.json"
  o.separator  ""
  o.separator  "If you use the -m option, parse-console will automatically"
  o.separator  "import your schema as ruby models."
  o.separator  ""
  o.separator  "Options"
  o.on('-a APP_ID', '--appId APP_ID', 'Parse App ID (required)') { |a| opts[:app_id] = a }
  o.on('-k REST_API_KEY', '--restAPIKey REST_API_KEY', 'Parse REST API Key') { |a| opts[:api_key] = a }
  o.on('-m MASTER_KEY', '--masterKey MASTER_KEY', 'Parse Master Key') { |a| opts[:master_key] = a }
  o.on('-s SERVER_URL', '--serverURL SERVER_URL', 'The Parse server url.', 'Defaults to http://localhost:1337/parse') { |a| opts[:server_url] = a }
  o.on('-v','--[no-]verbose', 'Run verbosely') { |v| opts[:verbose] ||= v }
  o.on('--pry', 'Use Pry instead of IRB') { |v| opts[:pry] = v }
  o.on('--version', 'Parse Stack version') do |v|
    require 'parse/stack/version'
    puts "Parse Stack : #{Parse::Stack::VERSION}"
    exit 1
  end
  o.on('--config-sample', "Create a sample config file to use. See --config.") do
    contents = JSON.pretty_generate(DEFAULT_CONFIG_CONTENTS)
    File.open(DEFAULT_CONFIG_FILE, 'w') { |f| f.write(contents) }
    puts "Created #{DEFAULT_CONFIG_FILE} : \n"
    puts contents
    puts "Edit #{DEFAULT_CONFIG_FILE} with your information and run: \n"
    puts "\n\tparse-console -c ./#{DEFAULT_CONFIG_FILE}\n\n"
    exit 1
  end
  o.on('-c','--config CONFIG_JSON', "Load config from a parse-dashboard.json compatible file.") do |filepath|
    unless File.exists?(filepath)
      $stderr.puts "File #{filepath} does not exist."
      exit 1
    end

    begin
      puts "Loading config: #{filepath}"
      file = File.read(filepath)
      config = JSON.parse file
      app = config["apps"].is_a?(Array) ?  config["apps"].first : config["apps"]
      opts[:server_url] ||= app["serverURL"]
      opts[:app_id] ||= app["appId"]
      opts[:api_key] ||= app["restAPIKey"]
      opts[:master_key] ||= app["masterKey"]
    rescue Exception => e
      $stderr.puts "Error: Incompatible JSON format for #{filepath} (#{e})"
      exit 1
    end

  end
  o.on('--url URL', 'Load the env config from a url.') do |url|
    begin
      puts "Loading config: #{url}"
      json = JSON.load open(url)
      raise "Contents not a JSON hash." unless json.is_a?(Hash)
      json.each { |k,v| ENV[k.upcase] = v }
      opts[:server_url] ||= ENV['PARSE_SERVER_URL']
      opts[:app_id] ||= ENV['PARSE_APP_ID'] || ENV['PARSE_APPLICATION_ID']
      opts[:api_key] ||= ENV['PARSE_REST_API_KEY'] || ENV['PARSE_API_KEY']
      opts[:master_key] ||= ENV['PARSE_MASTER_KEY']
    rescue Exception => e
      $stderr.puts "Error: Invalid JSON format for #{url} (#{e})"
      exit 1
    end
  end
end
opt_parser.parse!

opts[:server_url] ||= ARGV.shift || ENV['PARSE_SERVER_URL']

if opts[:app_id].nil?
  $stderr.puts "Error: Option --app_id missing\n"
  $stderr.puts opt_parser
  exit 1
end

if opts[:api_key].nil? && opts[:master_key].nil?
  $stderr.puts "Error: You must supply either --api_key (REST API Key) or --master_key (Parse Master key).\n"
  $stderr.puts opt_parser
  exit 1
end

# lazy loading
require "parse/stack"
Parse.setup server_url: opts[:server_url],
            app_id: opts[:app_id],
            api_key: opts[:api_key],
            master_key: opts[:master_key]
Parse.logging = true if opts[:verbose]
puts "Server : #{Parse.client.server_url}"
puts "App Id : #{Parse.client.app_id}"
puts "Master : #{Parse.client.master_key.present?}"

if Parse.client.master_key.present?
  puts "Schema : imported"
  Parse.auto_generate_models!.each do |model|
    puts "Generated #{model}" if opts[:verbose]
  end
else
  puts "Schema : skipped (requires master key)"
end
# Create shortnames
Parse.use_shortnames!

if opts[:pry]
  require "pry"
  Pry.start
else
  require "irb"
  IRB.start
end
